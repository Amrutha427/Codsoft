{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1TWLJ1a7Cm-EVUyD1Qb_A0edifxY1UhQW","timestamp":1719260042923}],"authorship_tag":"ABX9TyMm06VfQ8rdQ4vDz5f53Fvk"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"GyKjSiXO33h0","outputId":"7571f797-b83d-4554-d909-4c88e67e821b","executionInfo":{"status":"ok","timestamp":1719279614597,"user_tz":-330,"elapsed":157121,"user":{"displayName":"Amrutha Hemanthkumar","userId":"06176378138274452944"}}},"outputs":[{"output_type":"stream","name":"stdout","text":["----WELCOME TO THE TASK MANAGEMENT APP----\n","Enter how many tasks you want to add = 3\n","Enter task 1 = sports\n","Enter task 2 = ance\n","Enter task 3 = study\n","Today's tasks are\n","['sports', 'ance', 'study']\n","Enter \n","1-Add\n","2-Update\n","3-Delete\n","4-View\n","5-Exit/Stop\n","1\n","Enter task you want to add = drawing\n","Task 'drawing' has been successfully added.\n","Enter \n","1-Add\n","2-Update\n","3-Delete\n","4-View\n","5-Exit/Stop\n","2\n","Enter the task name you want to update = ance\n","Enter new task = cook\n","Updated task 'ance' to 'cook'.\n","Enter \n","1-Add\n","2-Update\n","3-Delete\n","4-View\n","5-Exit/Stop\n","3\n","Which task you want to delete = study\n","Task 'study' has been deleted.\n","Enter \n","1-Add\n","2-Update\n","3-Delete\n","4-View\n","5-Exit/Stop\n","4\n","Total tasks = ['sports', 'cook', 'drawing']\n","Enter \n","1-Add\n","2-Update\n","3-Delete\n","4-View\n","5-Exit/Stop\n","5\n","Closing the program....\n"]}],"source":["\n","def task():\n","    tasks = []  # Initialize an empty list to store tasks\n","    print(\"----WELCOME TO THE TASK MANAGEMENT APP----\")\n","    total_task = int(input(\"Enter how many tasks you want to add = \"))\n","    for i in range(1, total_task + 1):\n","        task_name = input(f\"Enter task {i} = \")\n","        tasks.append(task_name)\n","    print(f\"Today's tasks are\\n{tasks}\")\n","\n","    while True:\n","        try:\n","            operation = int(input(\"Enter \\n1-Add\\n2-Update\\n3-Delete\\n4-View\\n5-Exit/Stop\\n\"))\n","            if operation == 1:\n","                add = input(\"Enter task you want to add = \")\n","                tasks.append(add)\n","                print(f\"Task '{add}' has been successfully added.\")\n","            elif operation == 2:\n","                updated_val = input(\"Enter the task name you want to update = \")\n","                if updated_val in tasks:\n","                    up = input(\"Enter new task = \")\n","                    ind = tasks.index(updated_val)\n","                    tasks[ind] = up\n","                    print(f\"Updated task '{updated_val}' to '{up}'.\")\n","                else:\n","                    print(\"Task not found.\")\n","            elif operation == 3:\n","                del_val = input(\"Which task you want to delete = \")\n","                if del_val in tasks:\n","                    ind = tasks.index(del_val)\n","                    del tasks[ind]\n","                    print(f\"Task '{del_val}' has been deleted.\")\n","                else:\n","                    print(\"Task not found.\")\n","            elif operation == 4:\n","                print(f\"Total tasks = {tasks}\")\n","            elif operation == 5:\n","                print(\"Closing the program....\")\n","                break\n","            else:\n","                print(\"Invalid Input. Please enter a number from 1 to 5.\")\n","        except ValueError:\n","            print(\"Invalid Input. Please enter a valid number.\")\n","\n","task()\n","\n","\n"]},{"cell_type":"markdown","source":["TO-DO LIST: TASK 1\n","\n"," A To-Do List application is a useful project that helps users manage\n","and organize their tasks efficiently. This project aims to create a\n","command-line or GUI-based application using Python, allowing\n","users to create, update, and track their to-do lists.\n"],"metadata":{"id":"4u47Tx1d_z04"}},{"cell_type":"markdown","source":["\n","\n","\n","\n","CONTACT LIST: TASK 5\n","\n"," Contact Information: Store name, phone number, email, and address for each contact. Add Contact: Allow users to add new contacts with their details. View Contact List: Display a list of all saved contacts with names and phone numbers. Search Contact: Implement a search function to find contacts by name or phone number. Update Contact: Enable users to update contact details. Delete Contact: Provide an option to delete a contact. User Interface: Design a user-friendly interface for easy interaction"],"metadata":{"id":"zeMmNINFDKMH"}},{"cell_type":"code","source":["\n","\n","\n","\n","\n","contacts = []  # List to store contact dictionaries\n","\n","def show_menu():\n","    print(\"Contact Book\")\n","    print(\"1. Add Contact\")\n","    print(\"2. View Contact List\")\n","    print(\"3. Search Contact\")\n","    print(\"4. Update Contact\")\n","    print(\"5. Delete Contact\")\n","    print(\"6. Exit\")\n","\n","def add_contact():\n","    name = input(\"Enter name: \")\n","    phone = input(\"Enter phone number: \")\n","    email = input(\"Enter email: \")\n","    address = input(\"Enter address: \")\n","    contact = {\"name\": name, \"phone\": phone, \"email\": email, \"address\": address}\n","    contacts.append(contact)\n","    print(\"Contact added successfully!\")\n","\n","def view_contacts():\n","    if not contacts:\n","        print(\"No contacts found.\")\n","    else:\n","        for contact in contacts:\n","            print(f\"Name: {contact['name']}, Phone: {contact['phone']}\")\n","\n","def search_contact():\n","    search_term = input(\"Enter name or phone number to search: \")\n","    matching_contacts = [contact for contact in contacts if search_term.lower() in contact['name'].lower() or search_term in contact['phone']]\n","    if not matching_contacts:\n","        print(\"No matching contacts found.\")\n","    else:\n","        for contact in matching_contacts:\n","            print(f\"Name: {contact['name']}, Phone: {contact['phone']}, Email: {contact['email']}, Address: {contact['address']}\")\n","\n","def update_contact():\n","    search_term = input(\"Enter name or phone number of the contact to update: \")\n","    matching_contacts = [contact for contact in contacts if search_term.lower() in contact['name'].lower() or search_term in contact['phone']]\n","    if not matching_contacts:\n","        print(\"No matching contacts found.\")\n","    else:\n","        for i, contact in enumerate(matching_contacts, start=1):\n","            print(f\"{i}. Name: {contact['name']}, Phone: {contact['phone']}\")\n","        choice = int(input(\"Enter the number of the contact to update: \"))\n","        if 1 <= choice <= len(matching_contacts):\n","            update_contact = matching_contacts[choice - 1]\n","            name = input(\"Enter new name (leave blank to keep current): \") or update_contact['name']\n","            phone = input(\"Enter new phone number (leave blank to keep current): \") or update_contact['phone']\n","            email = input(\"Enter new email (leave blank to keep current): \") or update_contact['email']\n","            address = input(\"Enter new address (leave blank to keep current): \") or update_contact['address']\n","            update_contact.update({\"name\": name, \"phone\": phone, \"email\": email, \"address\": address})\n","            print(\"Contact updated successfully!\")\n","        else:\n","            print(\"Invalid choice.\")\n","\n","def delete_contact():\n","    search_term = input(\"Enter name or phone number of the contact to delete: \")\n","    matching_contacts = [contact for contact in contacts if search_term.lower() in contact['name'].lower() or search_term in contact['phone']]\n","    if not matching_contacts:\n","        print(\"No matching contacts found.\")\n","    else:\n","        for i, contact in enumerate(matching_contacts, start=1):\n","            print(f\"{i}. Name: {contact['name']}, Phone: {contact['phone']}\")\n","        choice = int(input(\"Enter the number of the contact to delete: \"))\n","        if 1 <= choice <= len(matching_contacts):\n","            contacts.remove(matching_contacts[choice - 1])\n","            print(\"Contact deleted successfully!\")\n","        else:\n","            print(\"Invalid choice.\")\n","\n","while True:\n","    show_menu()\n","    choice = input(\"Enter your choice (1-6): \")\n","\n","    if choice == \"1\":\n","        add_contact()\n","    elif choice == \"2\":\n","        view_contacts()\n","    elif choice == \"3\":\n","        search_contact()\n","    elif choice == \"4\":\n","        update_contact()\n","    elif choice == \"5\":\n","        delete_contact()\n","    elif choice == \"6\":\n","        print(\"Exiting the application...\")\n","        break\n","    else:\n","        print(\"Invalid choice. Please try again.\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"dhuwU3xw7WTh","outputId":"e4361bb3-1c0e-427e-b688-08553a53772e"},"execution_count":null,"outputs":[{"metadata":{"tags":null},"name":"stdout","output_type":"stream","text":["Contact Book\n","1. Add Contact\n","2. View Contact List\n","3. Search Contact\n","4. Update Contact\n","5. Delete Contact\n","6. Exit\n"]}]}]}